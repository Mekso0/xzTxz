
import telebot
import os
import logging
from telebot import types
from secrets import token_hex
from settings import API_TOKEN, stat, time, capt, kanal  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–∑–¥–∞—Ç—å settings.py
import datetime
import time

logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(API_TOKEN, threaded=False) # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ threaded=False

ADMIN_ID = 6646133212  # <--- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_IDS = [6646133212] 

DATABASE_FILE = "database.txt"
BANNED_FILE = "banned.txt"
WELCOME_IMAGE = "welcome.png" # –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

conversations = {}
reklama_mode = False

# –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cached_welcome_image = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
def load_welcome_image():
    global cached_welcome_image
    try:
        with open(WELCOME_IMAGE, 'rb') as photo:
           cached_welcome_image = photo.read()
           logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{WELCOME_IMAGE}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å.")
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{WELCOME_IMAGE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_to_database(user_id, username):
    try:
        with open(DATABASE_FILE, "r", encoding="utf-8") as f:
            existing_users = set(line.strip().split(',')[0] for line in f)
    except FileNotFoundError:
        existing_users = set()

    if str(user_id) not in existing_users:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            with open(DATABASE_FILE, "a", encoding="utf-8") as f:
                f.write(f"{user_id},{username},{timestamp}\n")
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ {timestamp}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


def log_user_action(message, action):
    user = message.from_user.username if message.from_user.username else "Anonymous"
    chat_id = message.chat.id
    message_id = message.message_id
    conversations[chat_id] = {"user_id": message.from_user.id, "message_id": message_id}

    bot.send_message(ADMIN_ID, f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} \n–ü—Ä–æ—Ñ–∏–ª—å: tg://openmessage?user_id={message.from_user.id} \n–Æ–∑–µ—Ä: @{user}\n–î–µ–π—Å—Ç–≤–∏–µ: {action} \nChat ID: {chat_id} \nMessage ID: {message_id}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_banned(user_id):
    try:
        with open(BANNED_FILE, "r", encoding="utf-8") as f:
            banned_users = set(line.strip() for line in f)
    except FileNotFoundError:
        banned_users = set()
    return str(user_id) in banned_users


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
def ban_user(user_id):
    try:
        with open(BANNED_FILE, "a", encoding="utf-8") as f:
            f.write(f"{user_id}\n")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def unban_user(user_id):
    try:
        with open(BANNED_FILE, "r", encoding="utf-8") as f:
            banned_users = set(line.strip() for line in f)
        
        if str(user_id) in banned_users:
            banned_users.remove(str(user_id))
            with open(BANNED_FILE, "w", encoding="utf-8") as f:
                for user in banned_users:
                    f.write(f"{user}\n")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return True
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
            return False
    except FileNotFoundError:
        logging.error("–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

@bot.message_handler(commands=['ban'])
def ban(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, " üíÄ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –±–æ—Ç–∞!")
        return
    try:
        user_id_to_ban = int(message.text.split(" ")[1])
        ban_user(user_id_to_ban)
        bot.reply_to(message, f"üòì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ {user_id_to_ban} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['unban'])
def unban(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üíÄ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –±–æ—Ç–∞!")
        return
    try:
        user_id_to_unban = int(message.text.split(" ")[1])
        if unban_user(user_id_to_unban):
            bot.reply_to(message, f"ü•≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ {user_id_to_unban} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        else:
            bot.reply_to(message, f"üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ {user_id_to_unban} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username    
    if is_user_banned(user_id):
        bot.reply_to(message, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ!\n–ó–∞ –ø—Ä–∏—á–∏–Ω–æ–π/—Ä–∞–∑–±–∞–Ω–æ–º @DazSky")
        return
    
    add_user_to_database(user_id, username)
    log_user_action(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    kb = types.InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    button1 = types.InlineKeyboardButton(text="TIMECYC", callback_data="TimeBrTime", parse_mode="HTML")
    button2 = types.InlineKeyboardButton(text="TIMECYC NEIZZIR", callback_data="nTimeBrTime", parse_mode="HTML")
    kb.add(button1, button2)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    
    global cached_welcome_image
    if cached_welcome_image:
        try:
            bot.send_photo(message.chat.id, cached_welcome_image, caption=stat, reply_markup=kb, parse_mode='Markdown')
        except Exception as e:
            bot.send_message(message.chat.id, stat, reply_markup=kb, parse_mode='Markdown')
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
    else:
        try:
            with open(WELCOME_IMAGE, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=stat, reply_markup=kb, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(message.chat.id, stat, reply_markup=kb, parse_mode='Markdown')
            logging.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{WELCOME_IMAGE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
           bot.send_message(message.chat.id, stat, reply_markup=kb, parse_mode='Markdown')
           logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "TimeBrTime")
def TimeBrTime_callback(call):
    if is_user_banned(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ!\n–ó–∞ –ø—Ä–∏—á–∏–Ω–æ–π/—Ä–∞–∑–±–∞–Ω–æ–º @DazSky", show_alert=True)
        return
    bot.answer_callback_query(call.id)
    log_user_action(call.message, "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å TIMECYC'")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    kb = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="‚òÅÔ∏è –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤", url="https://g.co/kgs/KDTzamf")
    kb.add(url_button)
    
    bot.send_message(call.message.chat.id,"‚òÅÔ∏è")
    
    bot.send_message(call.message.chat.id, "‚ùï–ò—Å–ø–æ–ª—å–∑—É–π /timecyc –Ω–∏–∑–Ω–µ–±–∞, –≤–µ—Ä—Ö–Ω–µ–±–∞, –æ–±–ª–∞–∫–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞.\n–ö –ø—Ä–∏–º–µ—Ä—É:\n/timecyc #FF0000 #00FF00 #0000FF #FFFFFF\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ", reply_markup=kb)
    
@bot.callback_query_handler(func=lambda call: call.data == "nTimeBrTime")
def nTimeBrTime_callback(call):
    if is_user_banned(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ!\n–ó–∞ –ø—Ä–∏—á–∏–Ω–æ–π/—Ä–∞–∑–±–∞–Ω–æ–º @DazSky", show_alert=True)
        return
    bot.answer_callback_query(call.id)
    log_user_action(call.message, "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å TIMECYC –¥–ª—è NEIZZIR'")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
         bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    kb = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="‚òÅÔ∏è –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤", url="https://g.co/kgs/KDTzamf")
    kb.add(url_button)
    
    bot.send_message(call.message.chat.id,"‚òÅÔ∏è")
       
    bot.send_message(call.message.chat.id, "‚ùï–ò—Å–ø–æ–ª—å–∑—É–π /ntimecyc –Ω–∏–∑–Ω–µ–±–∞, –≤–µ—Ä—Ö–Ω–µ–±–∞, –æ–±–ª–∞–∫–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞2. –ö –ø—Ä–∏–º–µ—Ä—É:\n/ntimecyc #FF0000 #00FF00 #0000FF #FFFFFF #FF0000\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ", reply_markup=kb)


@bot.message_handler(commands=['timecyc'])
def timecyc(message):
    if is_user_banned(message.from_user.id):
        bot.reply_to(message, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ!\n–ó–∞ –ø—Ä–∏—á–∏–Ω–æ–π/—Ä–∞–∑–±–∞–Ω–æ–º @DazSky")
        return
    log_user_action(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /timecyc")
    timka = str(message.text)
    if len(timka) < 35:
        kb = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="‚òÅÔ∏è –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤", url="https://g.co/kgs/KDTzamf")
        kb.add(url_button)
        bot.send_message(message.chat.id,"‚òÅÔ∏è")
        bot.send_message(message.chat.id, "‚ùï–ò—Å–ø–æ–ª—å–∑—É–π /timecyc –Ω–∏–∑–Ω–µ–±–∞, –≤–µ—Ä—Ö–Ω–µ–±–∞, –æ–±–ª–∞–∫–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞.\n–ö –ø—Ä–∏–º–µ—Ä—É:\n/timecyc #FF0000 #00FF00 #0000FF #FFFFFF\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ", reply_markup=kb)
        return
    code = token_hex(3)
    print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª it.{code}_timecyc.json")
    random_name = message.from_user.username
    grn1 = f"{code}_timecyc.json"
    usercs = str(message.text)
    usercs = usercs.lstrip('/timecyc ').replace('#', '').split()
    try:
        colors = [tuple(int(usercs[i][j:j + 2], 16) for j in (0, 2, 4)) for i in range(4)]
    except (IndexError, ValueError):
        bot.reply_to(message, "ü§´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞!\n–í–æ—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ #RRGGBB")
        return
    try:
        with open('debug/script.scm', 'r') as file:
            data = file.read()
            data = data.replace('skbr', str(colors[0][0])).replace('skbg', str(colors[0][1])).replace('skbb', str(colors[0][2])).replace('sktr', str(colors[1][0])).replace('sktg', str(colors[1][1])).replace('sktb', str(colors[1][2])).replace('scr', str(colors[2][0])).replace('scg', str(colors[2][1])).replace('scb', str(colors[2][2])).replace('clr', str(colors[3][0])).replace('clg', str(colors[3][1])).replace('clb', str(colors[3][2]))
            with open(grn1, 'w') as file:
                file.write(data)

            bot.send_document(message.chat.id, open(grn1, 'rb'), caption='–¢–≤–æ–π timecyc —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ΩüèÅ')
    except FileNotFoundError:
        bot.reply_to(message, "–§–∞–π–ª 'debug/script.scm' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
@bot.message_handler(commands=['ntimecyc'])
def ntimecyc(message):
    if is_user_banned(message.from_user.id):
        bot.reply_to(message, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ!\n–ó–∞ –ø—Ä–∏—á–∏–Ω–æ–π/—Ä–∞–∑–±–∞–Ω–æ–º @DazSky")
        return
    log_user_action(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /ntimecyc")
    timka = str(message.text)
    if len(timka) < 35:
        kb = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="‚òÅÔ∏è –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤", url="https://g.co/kgs/KDTzamf")
        kb.add(url_button)
        bot.send_message(message.chat.id,"‚òÅÔ∏è")
        bot.send_message(message.chat.id, " ‚ùï–ò—Å–ø–æ–ª—å–∑—É–π /ntimecyc –Ω–∏–∑–Ω–µ–±–∞, –≤–µ—Ä—Ö–Ω–µ–±–∞, –æ–±–ª–∞–∫–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞, —Ü–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞2. –ö –ø—Ä–∏–º–µ—Ä—É:\n/ntimecyc #FF0000 #00FF00 #0000FF #FFFFFF #FF0000\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ", reply_markup=kb)
        return
    code = token_hex(3)
    print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª it.{code}_timecyc.json")
    random_name = message.from_user.username
    grn1 = f"{code}_timecyc.json"
    usercs = str(message.text)
    usercs = usercs.lstrip('/ntimecyc ').replace('#', '').split()
    try:
         if len(usercs) < 4:
             bot.reply_to(message, "üßü –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–≤–µ—Ç–æ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 4 —Ü–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX")
             return
         colors = [tuple(int(usercs[i][j:j + 2], 16) for j in (0, 2, 4)) for i in range(4)]
    except (IndexError, ValueError):
        bot.reply_to(message, "ü§´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞!\n–í–æ—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ #RRGGBB")
        return
    try:
        with open('debug/scripn.scm', 'r') as file:
            data = file.read()
            data = data.replace('sbr', str(colors[0][0])).replace('sbg', str(colors[0][1])).replace('sbb', str(colors[0][2])).replace('str', str(colors[1][0])).replace('stg', str(colors[1][1])).replace('stb', str(colors[1][2])).replace('scr', str(colors[2][0])).replace('scg', str(colors[2][1])).replace('scb', str(colors[2][2])).replace('clr', str(colors[3][0])).replace('clg', str(colors[3][1])).replace('clb', str(colors[3][2])).replace('sco', str(0)).replace('sca', str(0)).replace('srr', str(0))
            with open(grn1, 'w') as file:
                file.write(data)

            bot.send_document(message.chat.id, open(grn1, 'rb'), caption='–¢–≤–æ–π timecyc –¥–ª—è –ª–∞—É–Ω—á–µ—Ä–∞ Neizzir —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ΩüèÅ')
    except FileNotFoundError:
        bot.reply_to(message, "–§–∞–π–ª 'debug/scripn.scm' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /base
@bot.message_handler(commands=['base'])
def send_database(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üíÄ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –±–æ—Ç–∞!")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª database.txt
        with open(DATABASE_FILE, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMIN_ID} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except FileNotFoundError:
        bot.reply_to(message, "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logging.error("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


@bot.message_handler(func=lambda message: True)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def handle_other_messages(message):
    log_user_action(message, f"–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")


@bot.message_handler(commands=['reklama'], func=lambda message: message.from_user.id == ADMIN_ID)
def start_reklama(message):
    global reklama_mode
    reklama_mode = True
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and reklama_mode)
def send_reklama(message):
    global reklama_mode
    reklama_mode = False
    try:
        with open(DATABASE_FILE, "r", encoding="utf-8") as f:
            for line in f:
                user_id, username, timestamp = line.strip().split(',')
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message.photo:
                        bot.send_photo(int(user_id), message.photo[-1].file_id, caption=message.caption)
                    elif message.text:
                        bot.send_message(int(user_id), message.text, parse_mode="HTML", reply_markup=message.reply_markup)
                    else:
                        bot.send_message(int(user_id), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text != "/reklama")  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–µ /reklama
def handle_admin_message(message):
    if message.chat.id in conversations:
        chat_id = message.chat.id
        bot.send_message(chat_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}")
        del conversations[chat_id]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_welcome_image()

while True:
    try:
         bot.polling(none_stop=True, timeout=30)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ: {e}")
        time.sleep(10)
